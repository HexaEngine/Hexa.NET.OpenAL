// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.OpenAL
{
	public unsafe partial class OpenAL
	{
		/// <summary>
		/// Renderer State management. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alEnable")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EnableNative([NativeName(NativeNameType.Param, "capability")] [NativeName(NativeNameType.Type, "ALenum")] int capability)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[0])(capability);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[0])(capability);
			#endif
		}

		/// <summary>
		/// Renderer State management. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alEnable")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Enable([NativeName(NativeNameType.Param, "capability")] [NativeName(NativeNameType.Type, "ALenum")] int capability)
		{
			EnableNative(capability);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alDisable")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DisableNative([NativeName(NativeNameType.Param, "capability")] [NativeName(NativeNameType.Type, "ALenum")] int capability)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[1])(capability);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[1])(capability);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alDisable")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Disable([NativeName(NativeNameType.Param, "capability")] [NativeName(NativeNameType.Type, "ALenum")] int capability)
		{
			DisableNative(capability);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alIsEnabled")]
		[return: NativeName(NativeNameType.Type, "ALboolean")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsEnabledNative([NativeName(NativeNameType.Param, "capability")] [NativeName(NativeNameType.Type, "ALenum")] int capability)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte>)funcTable[2])(capability);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, byte>)funcTable[2])(capability);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alIsEnabled")]
		[return: NativeName(NativeNameType.Type, "ALboolean")]
		public static byte IsEnabled([NativeName(NativeNameType.Param, "capability")] [NativeName(NativeNameType.Type, "ALenum")] int capability)
		{
			byte ret = IsEnabledNative(capability);
			return ret;
		}

		/// <summary>
		/// Context state setting. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alDopplerFactor")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DopplerFactorNative([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat")] float value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[3])(value);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[3])(value);
			#endif
		}

		/// <summary>
		/// Context state setting. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alDopplerFactor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DopplerFactor([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat")] float value)
		{
			DopplerFactorNative(value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alDopplerVelocity")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DopplerVelocityNative([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat")] float value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[4])(value);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[4])(value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alDopplerVelocity")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DopplerVelocity([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat")] float value)
		{
			DopplerVelocityNative(value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alSpeedOfSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SpeedOfSoundNative([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat")] float value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[5])(value);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[5])(value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alSpeedOfSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpeedOfSound([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat")] float value)
		{
			SpeedOfSoundNative(value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alDistanceModel")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DistanceModelNative([NativeName(NativeNameType.Param, "distanceModel")] [NativeName(NativeNameType.Type, "ALenum")] int distanceModel)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[6])(distanceModel);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[6])(distanceModel);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alDistanceModel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DistanceModel([NativeName(NativeNameType.Param, "distanceModel")] [NativeName(NativeNameType.Type, "ALenum")] int distanceModel)
		{
			DistanceModelNative(distanceModel);
		}

		/// <summary>
		/// Context state retrieval. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetString")]
		[return: NativeName(NativeNameType.Type, "const ALchar*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetStringNative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)funcTable[7])(param);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[7])(param);
			#endif
		}

		/// <summary>
		/// Context state retrieval. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetString")]
		[return: NativeName(NativeNameType.Type, "const ALchar*")]
		public static byte* GetString([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param)
		{
			byte* ret = GetStringNative(param);
			return ret;
		}

		/// <summary>
		/// Context state retrieval. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetString")]
		[return: NativeName(NativeNameType.Type, "const ALchar*")]
		public static string GetStringS([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param)
		{
			string ret = Utils.DecodeStringUTF8(GetStringNative(param));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBooleanv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetBooleanvNative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALboolean*")] byte* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, byte*, void>)funcTable[8])(param, values);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[8])(param, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBooleanv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBooleanv([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALboolean*")] byte* values)
		{
			GetBooleanvNative(param, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBooleanv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBooleanv([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALboolean*")] ref byte values)
		{
			fixed (byte* pvalues = &values)
			{
				GetBooleanvNative(param, (byte*)pvalues);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBooleanv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBooleanv([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALboolean*")] ref string values)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (values != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(values);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(values, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			GetBooleanvNative(param, pStr0);
			values = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetIntegerv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetIntegervNative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALint*")] int* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int*, void>)funcTable[9])(param, values);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[9])(param, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetIntegerv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetIntegerv([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALint*")] int* values)
		{
			GetIntegervNative(param, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetIntegerv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetIntegerv([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALint*")] ref int values)
		{
			fixed (int* pvalues = &values)
			{
				GetIntegervNative(param, (int*)pvalues);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetFloatv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetFloatvNative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALfloat*")] float* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float*, void>)funcTable[10])(param, values);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[10])(param, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetFloatv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetFloatv([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALfloat*")] float* values)
		{
			GetFloatvNative(param, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetFloatv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetFloatv([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float values)
		{
			fixed (float* pvalues = &values)
			{
				GetFloatvNative(param, (float*)pvalues);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetDoublev")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetDoublevNative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALdouble*")] double* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, double*, void>)funcTable[11])(param, values);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[11])(param, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetDoublev")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetDoublev([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALdouble*")] double* values)
		{
			GetDoublevNative(param, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetDoublev")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetDoublev([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALdouble*")] ref double values)
		{
			fixed (double* pvalues = &values)
			{
				GetDoublevNative(param, (double*)pvalues);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBoolean")]
		[return: NativeName(NativeNameType.Type, "ALboolean")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GetBooleanNative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte>)funcTable[12])(param);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, byte>)funcTable[12])(param);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBoolean")]
		[return: NativeName(NativeNameType.Type, "ALboolean")]
		public static byte GetBoolean([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param)
		{
			byte ret = GetBooleanNative(param);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetInteger")]
		[return: NativeName(NativeNameType.Type, "ALint")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetIntegerNative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[13])(param);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[13])(param);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetInteger")]
		[return: NativeName(NativeNameType.Type, "ALint")]
		public static int GetInteger([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param)
		{
			int ret = GetIntegerNative(param);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetFloat")]
		[return: NativeName(NativeNameType.Type, "ALfloat")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float GetFloatNative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, float>)funcTable[14])(param);
			#else
			return (float)((delegate* unmanaged[Cdecl]<int, float>)funcTable[14])(param);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetFloat")]
		[return: NativeName(NativeNameType.Type, "ALfloat")]
		public static float GetFloat([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param)
		{
			float ret = GetFloatNative(param);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetDouble")]
		[return: NativeName(NativeNameType.Type, "ALdouble")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double GetDoubleNative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, double>)funcTable[15])(param);
			#else
			return (double)((delegate* unmanaged[Cdecl]<int, double>)funcTable[15])(param);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetDouble")]
		[return: NativeName(NativeNameType.Type, "ALdouble")]
		public static double GetDouble([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param)
		{
			double ret = GetDoubleNative(param);
			return ret;
		}

		/// <summary>
		/// Obtain the first error generated in the AL context since the last call to<br/>
		/// this function.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetError")]
		[return: NativeName(NativeNameType.Type, "ALenum")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetErrorNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[16])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[16])();
			#endif
		}

		/// <summary>
		/// Obtain the first error generated in the AL context since the last call to<br/>
		/// this function.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetError")]
		[return: NativeName(NativeNameType.Type, "ALenum")]
		public static int GetError()
		{
			int ret = GetErrorNative();
			return ret;
		}

		/// <summary>
		/// Query for the presence of an extension on the AL context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alIsExtensionPresent")]
		[return: NativeName(NativeNameType.Type, "ALboolean")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsExtensionPresentNative([NativeName(NativeNameType.Param, "extname")] [NativeName(NativeNameType.Type, "const ALchar*")] byte* extname)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte>)funcTable[17])(extname);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[17])((nint)extname);
			#endif
		}

		/// <summary>
		/// Query for the presence of an extension on the AL context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alIsExtensionPresent")]
		[return: NativeName(NativeNameType.Type, "ALboolean")]
		public static byte IsExtensionPresent([NativeName(NativeNameType.Param, "extname")] [NativeName(NativeNameType.Type, "const ALchar*")] byte* extname)
		{
			byte ret = IsExtensionPresentNative(extname);
			return ret;
		}

		/// <summary>
		/// Query for the presence of an extension on the AL context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alIsExtensionPresent")]
		[return: NativeName(NativeNameType.Type, "ALboolean")]
		public static byte IsExtensionPresent([NativeName(NativeNameType.Param, "extname")] [NativeName(NativeNameType.Type, "const ALchar*")] ref byte extname)
		{
			fixed (byte* pextname = &extname)
			{
				byte ret = IsExtensionPresentNative((byte*)pextname);
				return ret;
			}
		}

		/// <summary>
		/// Query for the presence of an extension on the AL context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alIsExtensionPresent")]
		[return: NativeName(NativeNameType.Type, "ALboolean")]
		public static byte IsExtensionPresent([NativeName(NativeNameType.Param, "extname")] [NativeName(NativeNameType.Type, "const ALchar*")] ReadOnlySpan<byte> extname)
		{
			fixed (byte* pextname = extname)
			{
				byte ret = IsExtensionPresentNative((byte*)pextname);
				return ret;
			}
		}

		/// <summary>
		/// Query for the presence of an extension on the AL context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alIsExtensionPresent")]
		[return: NativeName(NativeNameType.Type, "ALboolean")]
		public static byte IsExtensionPresent([NativeName(NativeNameType.Param, "extname")] [NativeName(NativeNameType.Type, "const ALchar*")] string extname)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (extname != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(extname);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(extname, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = IsExtensionPresentNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Retrieve the address of a function. The returned function may be context-<br/>
		/// specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetProcAddress")]
		[return: NativeName(NativeNameType.Type, "void*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* GetProcAddressNative([NativeName(NativeNameType.Param, "fname")] [NativeName(NativeNameType.Type, "const ALchar*")] byte* fname)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, void*>)funcTable[18])(fname);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[18])((nint)fname);
			#endif
		}

		/// <summary>
		/// Retrieve the address of a function. The returned function may be context-<br/>
		/// specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetProcAddress")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* GetProcAddress([NativeName(NativeNameType.Param, "fname")] [NativeName(NativeNameType.Type, "const ALchar*")] byte* fname)
		{
			void* ret = GetProcAddressNative(fname);
			return ret;
		}

		/// <summary>
		/// Retrieve the address of a function. The returned function may be context-<br/>
		/// specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetProcAddress")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* GetProcAddress([NativeName(NativeNameType.Param, "fname")] [NativeName(NativeNameType.Type, "const ALchar*")] ref byte fname)
		{
			fixed (byte* pfname = &fname)
			{
				void* ret = GetProcAddressNative((byte*)pfname);
				return ret;
			}
		}

		/// <summary>
		/// Retrieve the address of a function. The returned function may be context-<br/>
		/// specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetProcAddress")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* GetProcAddress([NativeName(NativeNameType.Param, "fname")] [NativeName(NativeNameType.Type, "const ALchar*")] ReadOnlySpan<byte> fname)
		{
			fixed (byte* pfname = fname)
			{
				void* ret = GetProcAddressNative((byte*)pfname);
				return ret;
			}
		}

		/// <summary>
		/// Retrieve the address of a function. The returned function may be context-<br/>
		/// specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetProcAddress")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* GetProcAddress([NativeName(NativeNameType.Param, "fname")] [NativeName(NativeNameType.Type, "const ALchar*")] string fname)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fname != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fname);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fname, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			void* ret = GetProcAddressNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Retrieve the value of an enum. The returned value may be context-specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetEnumValue")]
		[return: NativeName(NativeNameType.Type, "ALenum")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetEnumValueNative([NativeName(NativeNameType.Param, "ename")] [NativeName(NativeNameType.Type, "const ALchar*")] byte* ename)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int>)funcTable[19])(ename);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[19])((nint)ename);
			#endif
		}

		/// <summary>
		/// Retrieve the value of an enum. The returned value may be context-specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetEnumValue")]
		[return: NativeName(NativeNameType.Type, "ALenum")]
		public static int GetEnumValue([NativeName(NativeNameType.Param, "ename")] [NativeName(NativeNameType.Type, "const ALchar*")] byte* ename)
		{
			int ret = GetEnumValueNative(ename);
			return ret;
		}

		/// <summary>
		/// Retrieve the value of an enum. The returned value may be context-specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetEnumValue")]
		[return: NativeName(NativeNameType.Type, "ALenum")]
		public static int GetEnumValue([NativeName(NativeNameType.Param, "ename")] [NativeName(NativeNameType.Type, "const ALchar*")] ref byte ename)
		{
			fixed (byte* pename = &ename)
			{
				int ret = GetEnumValueNative((byte*)pename);
				return ret;
			}
		}

		/// <summary>
		/// Retrieve the value of an enum. The returned value may be context-specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetEnumValue")]
		[return: NativeName(NativeNameType.Type, "ALenum")]
		public static int GetEnumValue([NativeName(NativeNameType.Param, "ename")] [NativeName(NativeNameType.Type, "const ALchar*")] ReadOnlySpan<byte> ename)
		{
			fixed (byte* pename = ename)
			{
				int ret = GetEnumValueNative((byte*)pename);
				return ret;
			}
		}

		/// <summary>
		/// Retrieve the value of an enum. The returned value may be context-specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetEnumValue")]
		[return: NativeName(NativeNameType.Type, "ALenum")]
		public static int GetEnumValue([NativeName(NativeNameType.Param, "ename")] [NativeName(NativeNameType.Type, "const ALchar*")] string ename)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (ename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(ename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(ename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = GetEnumValueNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Set listener parameters. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alListenerf")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ListenerfNative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat")] float value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float, void>)funcTable[20])(param, value);
			#else
			((delegate* unmanaged[Cdecl]<int, float, void>)funcTable[20])(param, value);
			#endif
		}

		/// <summary>
		/// Set listener parameters. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alListenerf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Listenerf([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat")] float value)
		{
			ListenerfNative(param, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alListener3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Listener3FNative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat")] float value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat")] float value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat")] float value3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float, float, float, void>)funcTable[21])(param, value1, value2, value3);
			#else
			((delegate* unmanaged[Cdecl]<int, float, float, float, void>)funcTable[21])(param, value1, value2, value3);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alListener3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Listener3F([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat")] float value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat")] float value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat")] float value3)
		{
			Listener3FNative(param, value1, value2, value3);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alListenerfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ListenerfvNative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const ALfloat*")] float* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float*, void>)funcTable[22])(param, values);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[22])(param, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alListenerfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Listenerfv([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const ALfloat*")] float* values)
		{
			ListenerfvNative(param, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alListenerfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Listenerfv([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const ALfloat*")] ref float values)
		{
			fixed (float* pvalues = &values)
			{
				ListenerfvNative(param, (float*)pvalues);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alListeneri")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ListeneriNative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALint")] int value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[23])(param, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[23])(param, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alListeneri")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Listeneri([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALint")] int value)
		{
			ListeneriNative(param, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alListener3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Listener3INative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint")] int value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint")] int value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint")] int value3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[24])(param, value1, value2, value3);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[24])(param, value1, value2, value3);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alListener3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Listener3I([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint")] int value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint")] int value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint")] int value3)
		{
			Listener3INative(param, value1, value2, value3);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alListeneriv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ListenerivNative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const ALint*")] int* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int*, void>)funcTable[25])(param, values);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[25])(param, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alListeneriv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Listeneriv([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const ALint*")] int* values)
		{
			ListenerivNative(param, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alListeneriv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Listeneriv([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const ALint*")] ref int values)
		{
			fixed (int* pvalues = &values)
			{
				ListenerivNative(param, (int*)pvalues);
			}
		}

		/// <summary>
		/// Get listener parameters. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListenerf")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetListenerfNative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float*, void>)funcTable[26])(param, value);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[26])(param, (nint)value);
			#endif
		}

		/// <summary>
		/// Get listener parameters. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListenerf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListenerf([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value)
		{
			GetListenerfNative(param, value);
		}

		/// <summary>
		/// Get listener parameters. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListenerf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListenerf([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value)
		{
			fixed (float* pvalue = &value)
			{
				GetListenerfNative(param, (float*)pvalue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListener3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetListener3FNative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float*, float*, float*, void>)funcTable[27])(param, value1, value2, value3);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, nint, nint, void>)funcTable[27])(param, (nint)value1, (nint)value2, (nint)value3);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListener3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListener3F([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value3)
		{
			GetListener3FNative(param, value1, value2, value3);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListener3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListener3F([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value3)
		{
			fixed (float* pvalue1 = &value1)
			{
				GetListener3FNative(param, (float*)pvalue1, value2, value3);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListener3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListener3F([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value3)
		{
			fixed (float* pvalue2 = &value2)
			{
				GetListener3FNative(param, value1, (float*)pvalue2, value3);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListener3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListener3F([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value3)
		{
			fixed (float* pvalue1 = &value1)
			{
				fixed (float* pvalue2 = &value2)
				{
					GetListener3FNative(param, (float*)pvalue1, (float*)pvalue2, value3);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListener3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListener3F([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value3)
		{
			fixed (float* pvalue3 = &value3)
			{
				GetListener3FNative(param, value1, value2, (float*)pvalue3);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListener3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListener3F([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value3)
		{
			fixed (float* pvalue1 = &value1)
			{
				fixed (float* pvalue3 = &value3)
				{
					GetListener3FNative(param, (float*)pvalue1, value2, (float*)pvalue3);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListener3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListener3F([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value3)
		{
			fixed (float* pvalue2 = &value2)
			{
				fixed (float* pvalue3 = &value3)
				{
					GetListener3FNative(param, value1, (float*)pvalue2, (float*)pvalue3);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListener3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListener3F([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value3)
		{
			fixed (float* pvalue1 = &value1)
			{
				fixed (float* pvalue2 = &value2)
				{
					fixed (float* pvalue3 = &value3)
					{
						GetListener3FNative(param, (float*)pvalue1, (float*)pvalue2, (float*)pvalue3);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListenerfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetListenerfvNative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALfloat*")] float* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float*, void>)funcTable[28])(param, values);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[28])(param, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListenerfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListenerfv([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALfloat*")] float* values)
		{
			GetListenerfvNative(param, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListenerfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListenerfv([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float values)
		{
			fixed (float* pvalues = &values)
			{
				GetListenerfvNative(param, (float*)pvalues);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListeneri")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetListeneriNative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALint*")] int* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int*, void>)funcTable[29])(param, value);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[29])(param, (nint)value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListeneri")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListeneri([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALint*")] int* value)
		{
			GetListeneriNative(param, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListeneri")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListeneri([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALint*")] ref int value)
		{
			fixed (int* pvalue = &value)
			{
				GetListeneriNative(param, (int*)pvalue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListener3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetListener3INative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] int* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] int* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] int* value3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int*, int*, int*, void>)funcTable[30])(param, value1, value2, value3);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, nint, nint, void>)funcTable[30])(param, (nint)value1, (nint)value2, (nint)value3);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListener3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListener3I([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] int* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] int* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] int* value3)
		{
			GetListener3INative(param, value1, value2, value3);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListener3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListener3I([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] ref int value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] int* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] int* value3)
		{
			fixed (int* pvalue1 = &value1)
			{
				GetListener3INative(param, (int*)pvalue1, value2, value3);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListener3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListener3I([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] int* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] ref int value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] int* value3)
		{
			fixed (int* pvalue2 = &value2)
			{
				GetListener3INative(param, value1, (int*)pvalue2, value3);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListener3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListener3I([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] ref int value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] ref int value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] int* value3)
		{
			fixed (int* pvalue1 = &value1)
			{
				fixed (int* pvalue2 = &value2)
				{
					GetListener3INative(param, (int*)pvalue1, (int*)pvalue2, value3);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListener3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListener3I([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] int* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] int* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] ref int value3)
		{
			fixed (int* pvalue3 = &value3)
			{
				GetListener3INative(param, value1, value2, (int*)pvalue3);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListener3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListener3I([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] ref int value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] int* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] ref int value3)
		{
			fixed (int* pvalue1 = &value1)
			{
				fixed (int* pvalue3 = &value3)
				{
					GetListener3INative(param, (int*)pvalue1, value2, (int*)pvalue3);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListener3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListener3I([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] int* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] ref int value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] ref int value3)
		{
			fixed (int* pvalue2 = &value2)
			{
				fixed (int* pvalue3 = &value3)
				{
					GetListener3INative(param, value1, (int*)pvalue2, (int*)pvalue3);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListener3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListener3I([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] ref int value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] ref int value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] ref int value3)
		{
			fixed (int* pvalue1 = &value1)
			{
				fixed (int* pvalue2 = &value2)
				{
					fixed (int* pvalue3 = &value3)
					{
						GetListener3INative(param, (int*)pvalue1, (int*)pvalue2, (int*)pvalue3);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListeneriv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetListenerivNative([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALint*")] int* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int*, void>)funcTable[31])(param, values);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[31])(param, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListeneriv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListeneriv([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALint*")] int* values)
		{
			GetListenerivNative(param, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetListeneriv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetListeneriv([NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALint*")] ref int values)
		{
			fixed (int* pvalues = &values)
			{
				GetListenerivNative(param, (int*)pvalues);
			}
		}

		/// <summary>
		/// Create source objects. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGenSources")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GenSourcesNative([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "sources")] [NativeName(NativeNameType.Type, "ALuint*")] uint* sources)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[32])(n, sources);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[32])(n, (nint)sources);
			#endif
		}

		/// <summary>
		/// Create source objects. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGenSources")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GenSources([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "sources")] [NativeName(NativeNameType.Type, "ALuint*")] uint* sources)
		{
			GenSourcesNative(n, sources);
		}

		/// <summary>
		/// Create source objects. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGenSources")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GenSources([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "sources")] [NativeName(NativeNameType.Type, "ALuint*")] ref uint sources)
		{
			fixed (uint* psources = &sources)
			{
				GenSourcesNative(n, (uint*)psources);
			}
		}

		/// <summary>
		/// Delete source objects. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alDeleteSources")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DeleteSourcesNative([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "sources")] [NativeName(NativeNameType.Type, "const ALuint*")] uint* sources)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[33])(n, sources);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[33])(n, (nint)sources);
			#endif
		}

		/// <summary>
		/// Delete source objects. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alDeleteSources")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DeleteSources([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "sources")] [NativeName(NativeNameType.Type, "const ALuint*")] uint* sources)
		{
			DeleteSourcesNative(n, sources);
		}

		/// <summary>
		/// Delete source objects. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alDeleteSources")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DeleteSources([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "sources")] [NativeName(NativeNameType.Type, "const ALuint*")] ref uint sources)
		{
			fixed (uint* psources = &sources)
			{
				DeleteSourcesNative(n, (uint*)psources);
			}
		}

		/// <summary>
		/// Verify an ID is for a valid source. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alIsSource")]
		[return: NativeName(NativeNameType.Type, "ALboolean")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsSourceNative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[34])(source);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[34])(source);
			#endif
		}

		/// <summary>
		/// Verify an ID is for a valid source. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alIsSource")]
		[return: NativeName(NativeNameType.Type, "ALboolean")]
		public static byte IsSource([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source)
		{
			byte ret = IsSourceNative(source);
			return ret;
		}

		/// <summary>
		/// Set source parameters. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourcef")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SourcefNative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat")] float value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float, void>)funcTable[35])(source, param, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, float, void>)funcTable[35])(source, param, value);
			#endif
		}

		/// <summary>
		/// Set source parameters. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourcef")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Sourcef([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat")] float value)
		{
			SourcefNative(source, param, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alSource3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Source3FNative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat")] float value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat")] float value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat")] float value3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float, float, float, void>)funcTable[36])(source, param, value1, value2, value3);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, float, float, float, void>)funcTable[36])(source, param, value1, value2, value3);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alSource3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Source3F([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat")] float value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat")] float value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat")] float value3)
		{
			Source3FNative(source, param, value1, value2, value3);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourcefv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SourcefvNative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const ALfloat*")] float* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, void>)funcTable[37])(source, param, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[37])(source, param, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourcefv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Sourcefv([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const ALfloat*")] float* values)
		{
			SourcefvNative(source, param, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourcefv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Sourcefv([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const ALfloat*")] ref float values)
		{
			fixed (float* pvalues = &values)
			{
				SourcefvNative(source, param, (float*)pvalues);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourcei")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SourceiNative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALint")] int value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[38])(source, param, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[38])(source, param, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourcei")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Sourcei([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALint")] int value)
		{
			SourceiNative(source, param, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alSource3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Source3INative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint")] int value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint")] int value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint")] int value3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[39])(source, param, value1, value2, value3);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[39])(source, param, value1, value2, value3);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alSource3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Source3I([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint")] int value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint")] int value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint")] int value3)
		{
			Source3INative(source, param, value1, value2, value3);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourceiv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SourceivNative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const ALint*")] int* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int*, void>)funcTable[40])(source, param, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[40])(source, param, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourceiv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Sourceiv([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const ALint*")] int* values)
		{
			SourceivNative(source, param, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourceiv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Sourceiv([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const ALint*")] ref int values)
		{
			fixed (int* pvalues = &values)
			{
				SourceivNative(source, param, (int*)pvalues);
			}
		}

		/// <summary>
		/// Get source parameters. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSourcef")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetSourcefNative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, void>)funcTable[41])(source, param, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[41])(source, param, (nint)value);
			#endif
		}

		/// <summary>
		/// Get source parameters. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSourcef")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSourcef([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value)
		{
			GetSourcefNative(source, param, value);
		}

		/// <summary>
		/// Get source parameters. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSourcef")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSourcef([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value)
		{
			fixed (float* pvalue = &value)
			{
				GetSourcefNative(source, param, (float*)pvalue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSource3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetSource3FNative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, float*, float*, void>)funcTable[42])(source, param, value1, value2, value3);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, nint, nint, void>)funcTable[42])(source, param, (nint)value1, (nint)value2, (nint)value3);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSource3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSource3F([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value3)
		{
			GetSource3FNative(source, param, value1, value2, value3);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSource3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSource3F([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value3)
		{
			fixed (float* pvalue1 = &value1)
			{
				GetSource3FNative(source, param, (float*)pvalue1, value2, value3);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSource3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSource3F([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value3)
		{
			fixed (float* pvalue2 = &value2)
			{
				GetSource3FNative(source, param, value1, (float*)pvalue2, value3);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSource3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSource3F([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value3)
		{
			fixed (float* pvalue1 = &value1)
			{
				fixed (float* pvalue2 = &value2)
				{
					GetSource3FNative(source, param, (float*)pvalue1, (float*)pvalue2, value3);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSource3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSource3F([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value3)
		{
			fixed (float* pvalue3 = &value3)
			{
				GetSource3FNative(source, param, value1, value2, (float*)pvalue3);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSource3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSource3F([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value3)
		{
			fixed (float* pvalue1 = &value1)
			{
				fixed (float* pvalue3 = &value3)
				{
					GetSource3FNative(source, param, (float*)pvalue1, value2, (float*)pvalue3);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSource3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSource3F([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value3)
		{
			fixed (float* pvalue2 = &value2)
			{
				fixed (float* pvalue3 = &value3)
				{
					GetSource3FNative(source, param, value1, (float*)pvalue2, (float*)pvalue3);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSource3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSource3F([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value3)
		{
			fixed (float* pvalue1 = &value1)
			{
				fixed (float* pvalue2 = &value2)
				{
					fixed (float* pvalue3 = &value3)
					{
						GetSource3FNative(source, param, (float*)pvalue1, (float*)pvalue2, (float*)pvalue3);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSourcefv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetSourcefvNative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALfloat*")] float* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, void>)funcTable[43])(source, param, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[43])(source, param, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSourcefv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSourcefv([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALfloat*")] float* values)
		{
			GetSourcefvNative(source, param, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSourcefv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSourcefv([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float values)
		{
			fixed (float* pvalues = &values)
			{
				GetSourcefvNative(source, param, (float*)pvalues);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSourcei")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetSourceiNative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALint*")] int* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int*, void>)funcTable[44])(source, param, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[44])(source, param, (nint)value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSourcei")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSourcei([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALint*")] int* value)
		{
			GetSourceiNative(source, param, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSourcei")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSourcei([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALint*")] ref int value)
		{
			fixed (int* pvalue = &value)
			{
				GetSourceiNative(source, param, (int*)pvalue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSource3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetSource3INative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] int* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] int* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] int* value3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int*, int*, int*, void>)funcTable[45])(source, param, value1, value2, value3);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, nint, nint, void>)funcTable[45])(source, param, (nint)value1, (nint)value2, (nint)value3);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSource3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSource3I([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] int* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] int* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] int* value3)
		{
			GetSource3INative(source, param, value1, value2, value3);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSource3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSource3I([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] ref int value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] int* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] int* value3)
		{
			fixed (int* pvalue1 = &value1)
			{
				GetSource3INative(source, param, (int*)pvalue1, value2, value3);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSource3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSource3I([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] int* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] ref int value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] int* value3)
		{
			fixed (int* pvalue2 = &value2)
			{
				GetSource3INative(source, param, value1, (int*)pvalue2, value3);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSource3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSource3I([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] ref int value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] ref int value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] int* value3)
		{
			fixed (int* pvalue1 = &value1)
			{
				fixed (int* pvalue2 = &value2)
				{
					GetSource3INative(source, param, (int*)pvalue1, (int*)pvalue2, value3);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSource3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSource3I([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] int* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] int* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] ref int value3)
		{
			fixed (int* pvalue3 = &value3)
			{
				GetSource3INative(source, param, value1, value2, (int*)pvalue3);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSource3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSource3I([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] ref int value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] int* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] ref int value3)
		{
			fixed (int* pvalue1 = &value1)
			{
				fixed (int* pvalue3 = &value3)
				{
					GetSource3INative(source, param, (int*)pvalue1, value2, (int*)pvalue3);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSource3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSource3I([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] int* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] ref int value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] ref int value3)
		{
			fixed (int* pvalue2 = &value2)
			{
				fixed (int* pvalue3 = &value3)
				{
					GetSource3INative(source, param, value1, (int*)pvalue2, (int*)pvalue3);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSource3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSource3I([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] ref int value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] ref int value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] ref int value3)
		{
			fixed (int* pvalue1 = &value1)
			{
				fixed (int* pvalue2 = &value2)
				{
					fixed (int* pvalue3 = &value3)
					{
						GetSource3INative(source, param, (int*)pvalue1, (int*)pvalue2, (int*)pvalue3);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSourceiv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetSourceivNative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALint*")] int* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int*, void>)funcTable[46])(source, param, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[46])(source, param, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSourceiv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSourceiv([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALint*")] int* values)
		{
			GetSourceivNative(source, param, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetSourceiv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetSourceiv([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALint*")] ref int values)
		{
			fixed (int* pvalues = &values)
			{
				GetSourceivNative(source, param, (int*)pvalues);
			}
		}

		/// <summary>
		/// Play, restart, or resume a source, setting its state to AL_PLAYING. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourcePlay")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SourcePlayNative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[47])(source);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[47])(source);
			#endif
		}

		/// <summary>
		/// Play, restart, or resume a source, setting its state to AL_PLAYING. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourcePlay")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SourcePlay([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source)
		{
			SourcePlayNative(source);
		}

		/// <summary>
		/// Stop a source, setting its state to AL_STOPPED if playing or paused. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourceStop")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SourceStopNative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[48])(source);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[48])(source);
			#endif
		}

		/// <summary>
		/// Stop a source, setting its state to AL_STOPPED if playing or paused. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourceStop")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SourceStop([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source)
		{
			SourceStopNative(source);
		}

		/// <summary>
		/// Rewind a source, setting its state to AL_INITIAL. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourceRewind")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SourceRewindNative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[49])(source);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[49])(source);
			#endif
		}

		/// <summary>
		/// Rewind a source, setting its state to AL_INITIAL. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourceRewind")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SourceRewind([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source)
		{
			SourceRewindNative(source);
		}

		/// <summary>
		/// Pause a source, setting its state to AL_PAUSED if playing. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourcePause")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SourcePauseNative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[50])(source);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[50])(source);
			#endif
		}

		/// <summary>
		/// Pause a source, setting its state to AL_PAUSED if playing. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourcePause")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SourcePause([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source)
		{
			SourcePauseNative(source);
		}

		/// <summary>
		/// Play, restart, or resume a list of sources atomically. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourcePlayv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SourcePlayvNative([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "sources")] [NativeName(NativeNameType.Type, "const ALuint*")] uint* sources)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[51])(n, sources);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[51])(n, (nint)sources);
			#endif
		}

		/// <summary>
		/// Play, restart, or resume a list of sources atomically. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourcePlayv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SourcePlayv([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "sources")] [NativeName(NativeNameType.Type, "const ALuint*")] uint* sources)
		{
			SourcePlayvNative(n, sources);
		}

		/// <summary>
		/// Play, restart, or resume a list of sources atomically. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourcePlayv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SourcePlayv([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "sources")] [NativeName(NativeNameType.Type, "const ALuint*")] ref uint sources)
		{
			fixed (uint* psources = &sources)
			{
				SourcePlayvNative(n, (uint*)psources);
			}
		}

		/// <summary>
		/// Stop a list of sources atomically. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourceStopv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SourceStopvNative([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "sources")] [NativeName(NativeNameType.Type, "const ALuint*")] uint* sources)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[52])(n, sources);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[52])(n, (nint)sources);
			#endif
		}

		/// <summary>
		/// Stop a list of sources atomically. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourceStopv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SourceStopv([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "sources")] [NativeName(NativeNameType.Type, "const ALuint*")] uint* sources)
		{
			SourceStopvNative(n, sources);
		}

		/// <summary>
		/// Stop a list of sources atomically. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourceStopv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SourceStopv([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "sources")] [NativeName(NativeNameType.Type, "const ALuint*")] ref uint sources)
		{
			fixed (uint* psources = &sources)
			{
				SourceStopvNative(n, (uint*)psources);
			}
		}

		/// <summary>
		/// Rewind a list of sources atomically. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourceRewindv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SourceRewindvNative([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "sources")] [NativeName(NativeNameType.Type, "const ALuint*")] uint* sources)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[53])(n, sources);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[53])(n, (nint)sources);
			#endif
		}

		/// <summary>
		/// Rewind a list of sources atomically. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourceRewindv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SourceRewindv([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "sources")] [NativeName(NativeNameType.Type, "const ALuint*")] uint* sources)
		{
			SourceRewindvNative(n, sources);
		}

		/// <summary>
		/// Rewind a list of sources atomically. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourceRewindv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SourceRewindv([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "sources")] [NativeName(NativeNameType.Type, "const ALuint*")] ref uint sources)
		{
			fixed (uint* psources = &sources)
			{
				SourceRewindvNative(n, (uint*)psources);
			}
		}

		/// <summary>
		/// Pause a list of sources atomically. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourcePausev")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SourcePausevNative([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "sources")] [NativeName(NativeNameType.Type, "const ALuint*")] uint* sources)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[54])(n, sources);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[54])(n, (nint)sources);
			#endif
		}

		/// <summary>
		/// Pause a list of sources atomically. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourcePausev")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SourcePausev([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "sources")] [NativeName(NativeNameType.Type, "const ALuint*")] uint* sources)
		{
			SourcePausevNative(n, sources);
		}

		/// <summary>
		/// Pause a list of sources atomically. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourcePausev")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SourcePausev([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "sources")] [NativeName(NativeNameType.Type, "const ALuint*")] ref uint sources)
		{
			fixed (uint* psources = &sources)
			{
				SourcePausevNative(n, (uint*)psources);
			}
		}

		/// <summary>
		/// Queue buffers onto a source <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourceQueueBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SourceQueueBuffersNative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "nb")] [NativeName(NativeNameType.Type, "ALsizei")] int nb, [NativeName(NativeNameType.Param, "buffers")] [NativeName(NativeNameType.Type, "const ALuint*")] uint* buffers)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)funcTable[55])(source, nb, buffers);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[55])(source, nb, (nint)buffers);
			#endif
		}

		/// <summary>
		/// Queue buffers onto a source <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourceQueueBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SourceQueueBuffers([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "nb")] [NativeName(NativeNameType.Type, "ALsizei")] int nb, [NativeName(NativeNameType.Param, "buffers")] [NativeName(NativeNameType.Type, "const ALuint*")] uint* buffers)
		{
			SourceQueueBuffersNative(source, nb, buffers);
		}

		/// <summary>
		/// Queue buffers onto a source <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourceQueueBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SourceQueueBuffers([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "nb")] [NativeName(NativeNameType.Type, "ALsizei")] int nb, [NativeName(NativeNameType.Param, "buffers")] [NativeName(NativeNameType.Type, "const ALuint*")] ref uint buffers)
		{
			fixed (uint* pbuffers = &buffers)
			{
				SourceQueueBuffersNative(source, nb, (uint*)pbuffers);
			}
		}

		/// <summary>
		/// Unqueue processed buffers from a source <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourceUnqueueBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SourceUnqueueBuffersNative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "nb")] [NativeName(NativeNameType.Type, "ALsizei")] int nb, [NativeName(NativeNameType.Param, "buffers")] [NativeName(NativeNameType.Type, "ALuint*")] uint* buffers)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)funcTable[56])(source, nb, buffers);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[56])(source, nb, (nint)buffers);
			#endif
		}

		/// <summary>
		/// Unqueue processed buffers from a source <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourceUnqueueBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SourceUnqueueBuffers([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "nb")] [NativeName(NativeNameType.Type, "ALsizei")] int nb, [NativeName(NativeNameType.Param, "buffers")] [NativeName(NativeNameType.Type, "ALuint*")] uint* buffers)
		{
			SourceUnqueueBuffersNative(source, nb, buffers);
		}

		/// <summary>
		/// Unqueue processed buffers from a source <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alSourceUnqueueBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SourceUnqueueBuffers([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ALuint")] uint source, [NativeName(NativeNameType.Param, "nb")] [NativeName(NativeNameType.Type, "ALsizei")] int nb, [NativeName(NativeNameType.Param, "buffers")] [NativeName(NativeNameType.Type, "ALuint*")] ref uint buffers)
		{
			fixed (uint* pbuffers = &buffers)
			{
				SourceUnqueueBuffersNative(source, nb, (uint*)pbuffers);
			}
		}

		/// <summary>
		/// Create buffer objects <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGenBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GenBuffersNative([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "buffers")] [NativeName(NativeNameType.Type, "ALuint*")] uint* buffers)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[57])(n, buffers);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[57])(n, (nint)buffers);
			#endif
		}

		/// <summary>
		/// Create buffer objects <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGenBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GenBuffers([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "buffers")] [NativeName(NativeNameType.Type, "ALuint*")] uint* buffers)
		{
			GenBuffersNative(n, buffers);
		}

		/// <summary>
		/// Create buffer objects <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGenBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GenBuffers([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "buffers")] [NativeName(NativeNameType.Type, "ALuint*")] ref uint buffers)
		{
			fixed (uint* pbuffers = &buffers)
			{
				GenBuffersNative(n, (uint*)pbuffers);
			}
		}

		/// <summary>
		/// Delete buffer objects <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alDeleteBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DeleteBuffersNative([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "buffers")] [NativeName(NativeNameType.Type, "const ALuint*")] uint* buffers)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[58])(n, buffers);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[58])(n, (nint)buffers);
			#endif
		}

		/// <summary>
		/// Delete buffer objects <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alDeleteBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DeleteBuffers([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "buffers")] [NativeName(NativeNameType.Type, "const ALuint*")] uint* buffers)
		{
			DeleteBuffersNative(n, buffers);
		}

		/// <summary>
		/// Delete buffer objects <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alDeleteBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DeleteBuffers([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "ALsizei")] int n, [NativeName(NativeNameType.Param, "buffers")] [NativeName(NativeNameType.Type, "const ALuint*")] ref uint buffers)
		{
			fixed (uint* pbuffers = &buffers)
			{
				DeleteBuffersNative(n, (uint*)pbuffers);
			}
		}

		/// <summary>
		/// Verify an ID is a valid buffer (including the NULL buffer) <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alIsBuffer")]
		[return: NativeName(NativeNameType.Type, "ALboolean")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsBufferNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[59])(buffer);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[59])(buffer);
			#endif
		}

		/// <summary>
		/// Verify an ID is a valid buffer (including the NULL buffer) <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alIsBuffer")]
		[return: NativeName(NativeNameType.Type, "ALboolean")]
		public static byte IsBuffer([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer)
		{
			byte ret = IsBufferNative(buffer);
			return ret;
		}

		/// <summary>
		/// Copies data into the buffer, interpreting it using the specified format and<br/>
		/// samplerate.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alBufferData")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BufferDataNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "ALenum")] int format, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const ALvoid*")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "ALsizei")] int size, [NativeName(NativeNameType.Param, "samplerate")] [NativeName(NativeNameType.Type, "ALsizei")] int samplerate)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, void*, int, int, void>)funcTable[60])(buffer, format, data, size, samplerate);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, int, int, void>)funcTable[60])(buffer, format, (nint)data, size, samplerate);
			#endif
		}

		/// <summary>
		/// Copies data into the buffer, interpreting it using the specified format and<br/>
		/// samplerate.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alBufferData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BufferData([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "ALenum")] int format, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const ALvoid*")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "ALsizei")] int size, [NativeName(NativeNameType.Param, "samplerate")] [NativeName(NativeNameType.Type, "ALsizei")] int samplerate)
		{
			BufferDataNative(buffer, format, data, size, samplerate);
		}

		/// <summary>
		/// Set buffer parameters. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alBufferf")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BufferfNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat")] float value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float, void>)funcTable[61])(buffer, param, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, float, void>)funcTable[61])(buffer, param, value);
			#endif
		}

		/// <summary>
		/// Set buffer parameters. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alBufferf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Bufferf([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat")] float value)
		{
			BufferfNative(buffer, param, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alBuffer3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Buffer3FNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat")] float value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat")] float value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat")] float value3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float, float, float, void>)funcTable[62])(buffer, param, value1, value2, value3);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, float, float, float, void>)funcTable[62])(buffer, param, value1, value2, value3);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alBuffer3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Buffer3F([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat")] float value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat")] float value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat")] float value3)
		{
			Buffer3FNative(buffer, param, value1, value2, value3);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alBufferfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BufferfvNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const ALfloat*")] float* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, void>)funcTable[63])(buffer, param, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[63])(buffer, param, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alBufferfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Bufferfv([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const ALfloat*")] float* values)
		{
			BufferfvNative(buffer, param, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alBufferfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Bufferfv([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const ALfloat*")] ref float values)
		{
			fixed (float* pvalues = &values)
			{
				BufferfvNative(buffer, param, (float*)pvalues);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alBufferi")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BufferiNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALint")] int value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[64])(buffer, param, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[64])(buffer, param, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alBufferi")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Bufferi([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALint")] int value)
		{
			BufferiNative(buffer, param, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alBuffer3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Buffer3INative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint")] int value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint")] int value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint")] int value3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[65])(buffer, param, value1, value2, value3);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[65])(buffer, param, value1, value2, value3);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alBuffer3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Buffer3I([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint")] int value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint")] int value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint")] int value3)
		{
			Buffer3INative(buffer, param, value1, value2, value3);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alBufferiv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BufferivNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const ALint*")] int* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int*, void>)funcTable[66])(buffer, param, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[66])(buffer, param, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alBufferiv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Bufferiv([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const ALint*")] int* values)
		{
			BufferivNative(buffer, param, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alBufferiv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Bufferiv([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const ALint*")] ref int values)
		{
			fixed (int* pvalues = &values)
			{
				BufferivNative(buffer, param, (int*)pvalues);
			}
		}

		/// <summary>
		/// Get buffer parameters. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBufferf")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetBufferfNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, void>)funcTable[67])(buffer, param, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[67])(buffer, param, (nint)value);
			#endif
		}

		/// <summary>
		/// Get buffer parameters. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBufferf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBufferf([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value)
		{
			GetBufferfNative(buffer, param, value);
		}

		/// <summary>
		/// Get buffer parameters. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBufferf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBufferf([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value)
		{
			fixed (float* pvalue = &value)
			{
				GetBufferfNative(buffer, param, (float*)pvalue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBuffer3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetBuffer3FNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, float*, float*, void>)funcTable[68])(buffer, param, value1, value2, value3);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, nint, nint, void>)funcTable[68])(buffer, param, (nint)value1, (nint)value2, (nint)value3);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBuffer3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBuffer3F([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value3)
		{
			GetBuffer3FNative(buffer, param, value1, value2, value3);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBuffer3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBuffer3F([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value3)
		{
			fixed (float* pvalue1 = &value1)
			{
				GetBuffer3FNative(buffer, param, (float*)pvalue1, value2, value3);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBuffer3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBuffer3F([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value3)
		{
			fixed (float* pvalue2 = &value2)
			{
				GetBuffer3FNative(buffer, param, value1, (float*)pvalue2, value3);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBuffer3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBuffer3F([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value3)
		{
			fixed (float* pvalue1 = &value1)
			{
				fixed (float* pvalue2 = &value2)
				{
					GetBuffer3FNative(buffer, param, (float*)pvalue1, (float*)pvalue2, value3);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBuffer3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBuffer3F([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value3)
		{
			fixed (float* pvalue3 = &value3)
			{
				GetBuffer3FNative(buffer, param, value1, value2, (float*)pvalue3);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBuffer3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBuffer3F([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value3)
		{
			fixed (float* pvalue1 = &value1)
			{
				fixed (float* pvalue3 = &value3)
				{
					GetBuffer3FNative(buffer, param, (float*)pvalue1, value2, (float*)pvalue3);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBuffer3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBuffer3F([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] float* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value3)
		{
			fixed (float* pvalue2 = &value2)
			{
				fixed (float* pvalue3 = &value3)
				{
					GetBuffer3FNative(buffer, param, value1, (float*)pvalue2, (float*)pvalue3);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBuffer3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBuffer3F([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float value3)
		{
			fixed (float* pvalue1 = &value1)
			{
				fixed (float* pvalue2 = &value2)
				{
					fixed (float* pvalue3 = &value3)
					{
						GetBuffer3FNative(buffer, param, (float*)pvalue1, (float*)pvalue2, (float*)pvalue3);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBufferfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetBufferfvNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALfloat*")] float* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, void>)funcTable[69])(buffer, param, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[69])(buffer, param, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBufferfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBufferfv([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALfloat*")] float* values)
		{
			GetBufferfvNative(buffer, param, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBufferfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBufferfv([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALfloat*")] ref float values)
		{
			fixed (float* pvalues = &values)
			{
				GetBufferfvNative(buffer, param, (float*)pvalues);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBufferi")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetBufferiNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALint*")] int* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int*, void>)funcTable[70])(buffer, param, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[70])(buffer, param, (nint)value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBufferi")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBufferi([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALint*")] int* value)
		{
			GetBufferiNative(buffer, param, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBufferi")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBufferi([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "ALint*")] ref int value)
		{
			fixed (int* pvalue = &value)
			{
				GetBufferiNative(buffer, param, (int*)pvalue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBuffer3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetBuffer3INative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] int* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] int* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] int* value3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int*, int*, int*, void>)funcTable[71])(buffer, param, value1, value2, value3);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, nint, nint, void>)funcTable[71])(buffer, param, (nint)value1, (nint)value2, (nint)value3);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBuffer3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBuffer3I([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] int* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] int* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] int* value3)
		{
			GetBuffer3INative(buffer, param, value1, value2, value3);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBuffer3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBuffer3I([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] ref int value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] int* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] int* value3)
		{
			fixed (int* pvalue1 = &value1)
			{
				GetBuffer3INative(buffer, param, (int*)pvalue1, value2, value3);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBuffer3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBuffer3I([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] int* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] ref int value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] int* value3)
		{
			fixed (int* pvalue2 = &value2)
			{
				GetBuffer3INative(buffer, param, value1, (int*)pvalue2, value3);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBuffer3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBuffer3I([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] ref int value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] ref int value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] int* value3)
		{
			fixed (int* pvalue1 = &value1)
			{
				fixed (int* pvalue2 = &value2)
				{
					GetBuffer3INative(buffer, param, (int*)pvalue1, (int*)pvalue2, value3);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBuffer3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBuffer3I([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] int* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] int* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] ref int value3)
		{
			fixed (int* pvalue3 = &value3)
			{
				GetBuffer3INative(buffer, param, value1, value2, (int*)pvalue3);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBuffer3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBuffer3I([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] ref int value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] int* value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] ref int value3)
		{
			fixed (int* pvalue1 = &value1)
			{
				fixed (int* pvalue3 = &value3)
				{
					GetBuffer3INative(buffer, param, (int*)pvalue1, value2, (int*)pvalue3);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBuffer3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBuffer3I([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] int* value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] ref int value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] ref int value3)
		{
			fixed (int* pvalue2 = &value2)
			{
				fixed (int* pvalue3 = &value3)
				{
					GetBuffer3INative(buffer, param, value1, (int*)pvalue2, (int*)pvalue3);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBuffer3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBuffer3I([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "value1")] [NativeName(NativeNameType.Type, "ALint*")] ref int value1, [NativeName(NativeNameType.Param, "value2")] [NativeName(NativeNameType.Type, "ALint*")] ref int value2, [NativeName(NativeNameType.Param, "value3")] [NativeName(NativeNameType.Type, "ALint*")] ref int value3)
		{
			fixed (int* pvalue1 = &value1)
			{
				fixed (int* pvalue2 = &value2)
				{
					fixed (int* pvalue3 = &value3)
					{
						GetBuffer3INative(buffer, param, (int*)pvalue1, (int*)pvalue2, (int*)pvalue3);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBufferiv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetBufferivNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALint*")] int* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int*, void>)funcTable[72])(buffer, param, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[72])(buffer, param, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBufferiv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBufferiv([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALint*")] int* values)
		{
			GetBufferivNative(buffer, param, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alGetBufferiv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetBufferiv([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALuint")] uint buffer, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALenum")] int param, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALint*")] ref int values)
		{
			fixed (int* pvalues = &values)
			{
				GetBufferivNative(buffer, param, (int*)pvalues);
			}
		}

		/// <summary>
		/// Create and attach a context to the given device. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCreateContext")]
		[return: NativeName(NativeNameType.Type, "ALCcontext*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ALCcontext* CreateContextNative([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevice* device, [NativeName(NativeNameType.Param, "attrlist")] [NativeName(NativeNameType.Type, "const ALCint*")] int* attrlist)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ALCdevice*, int*, ALCcontext*>)funcTable[73])(device, attrlist);
			#else
			return (ALCcontext*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[73])((nint)device, (nint)attrlist);
			#endif
		}

		/// <summary>
		/// Create and attach a context to the given device. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCreateContext")]
		[return: NativeName(NativeNameType.Type, "ALCcontext*")]
		public static ALCcontextPtr CreateContext([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device, [NativeName(NativeNameType.Param, "attrlist")] [NativeName(NativeNameType.Type, "const ALCint*")] int* attrlist)
		{
			ALCcontextPtr ret = CreateContextNative(device, attrlist);
			return ret;
		}

		/// <summary>
		/// Create and attach a context to the given device. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCreateContext")]
		[return: NativeName(NativeNameType.Type, "ALCcontext*")]
		public static ALCcontextPtr CreateContext([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device, [NativeName(NativeNameType.Param, "attrlist")] [NativeName(NativeNameType.Type, "const ALCint*")] int* attrlist)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				ALCcontextPtr ret = CreateContextNative((ALCdevice*)pdevice, attrlist);
				return ret;
			}
		}

		/// <summary>
		/// Create and attach a context to the given device. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCreateContext")]
		[return: NativeName(NativeNameType.Type, "ALCcontext*")]
		public static ALCcontextPtr CreateContext([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device, [NativeName(NativeNameType.Param, "attrlist")] [NativeName(NativeNameType.Type, "const ALCint*")] ref int attrlist)
		{
			fixed (int* pattrlist = &attrlist)
			{
				ALCcontextPtr ret = CreateContextNative(device, (int*)pattrlist);
				return ret;
			}
		}

		/// <summary>
		/// Create and attach a context to the given device. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCreateContext")]
		[return: NativeName(NativeNameType.Type, "ALCcontext*")]
		public static ALCcontextPtr CreateContext([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device, [NativeName(NativeNameType.Param, "attrlist")] [NativeName(NativeNameType.Type, "const ALCint*")] ref int attrlist)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				fixed (int* pattrlist = &attrlist)
				{
					ALCcontextPtr ret = CreateContextNative((ALCdevice*)pdevice, (int*)pattrlist);
					return ret;
				}
			}
		}

		/// <summary>
		/// Makes the given context the active process-wide context. Passing NULL clears<br/>
		/// the active context.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcMakeContextCurrent")]
		[return: NativeName(NativeNameType.Type, "ALCboolean")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte MakeContextCurrentNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ALCcontext*")] ALCcontext* context)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ALCcontext*, byte>)funcTable[74])(context);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[74])((nint)context);
			#endif
		}

		/// <summary>
		/// Makes the given context the active process-wide context. Passing NULL clears<br/>
		/// the active context.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcMakeContextCurrent")]
		[return: NativeName(NativeNameType.Type, "ALCboolean")]
		public static byte MakeContextCurrent([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ALCcontext*")] ALCcontextPtr context)
		{
			byte ret = MakeContextCurrentNative(context);
			return ret;
		}

		/// <summary>
		/// Makes the given context the active process-wide context. Passing NULL clears<br/>
		/// the active context.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcMakeContextCurrent")]
		[return: NativeName(NativeNameType.Type, "ALCboolean")]
		public static byte MakeContextCurrent([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ALCcontext*")] ref ALCcontext context)
		{
			fixed (ALCcontext* pcontext = &context)
			{
				byte ret = MakeContextCurrentNative((ALCcontext*)pcontext);
				return ret;
			}
		}

		/// <summary>
		/// Resumes processing updates for the given context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcProcessContext")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProcessContextNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ALCcontext*")] ALCcontext* context)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ALCcontext*, void>)funcTable[75])(context);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[75])((nint)context);
			#endif
		}

		/// <summary>
		/// Resumes processing updates for the given context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcProcessContext")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ProcessContext([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ALCcontext*")] ALCcontextPtr context)
		{
			ProcessContextNative(context);
		}

		/// <summary>
		/// Resumes processing updates for the given context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcProcessContext")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ProcessContext([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ALCcontext*")] ref ALCcontext context)
		{
			fixed (ALCcontext* pcontext = &context)
			{
				ProcessContextNative((ALCcontext*)pcontext);
			}
		}

		/// <summary>
		/// Suspends updates for the given context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcSuspendContext")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SuspendContextNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ALCcontext*")] ALCcontext* context)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ALCcontext*, void>)funcTable[76])(context);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[76])((nint)context);
			#endif
		}

		/// <summary>
		/// Suspends updates for the given context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcSuspendContext")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SuspendContext([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ALCcontext*")] ALCcontextPtr context)
		{
			SuspendContextNative(context);
		}

		/// <summary>
		/// Suspends updates for the given context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcSuspendContext")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SuspendContext([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ALCcontext*")] ref ALCcontext context)
		{
			fixed (ALCcontext* pcontext = &context)
			{
				SuspendContextNative((ALCcontext*)pcontext);
			}
		}

		/// <summary>
		/// Remove a context from its device and destroys it. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcDestroyContext")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DestroyContextNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ALCcontext*")] ALCcontext* context)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ALCcontext*, void>)funcTable[77])(context);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[77])((nint)context);
			#endif
		}

		/// <summary>
		/// Remove a context from its device and destroys it. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcDestroyContext")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DestroyContext([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ALCcontext*")] ALCcontextPtr context)
		{
			DestroyContextNative(context);
		}

		/// <summary>
		/// Remove a context from its device and destroys it. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcDestroyContext")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DestroyContext([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ALCcontext*")] ref ALCcontext context)
		{
			fixed (ALCcontext* pcontext = &context)
			{
				DestroyContextNative((ALCcontext*)pcontext);
			}
		}

		/// <summary>
		/// Returns the currently active context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetCurrentContext")]
		[return: NativeName(NativeNameType.Type, "ALCcontext*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ALCcontext* GetCurrentContextNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ALCcontext*>)funcTable[78])();
			#else
			return (ALCcontext*)((delegate* unmanaged[Cdecl]<nint>)funcTable[78])();
			#endif
		}

		/// <summary>
		/// Returns the currently active context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetCurrentContext")]
		[return: NativeName(NativeNameType.Type, "ALCcontext*")]
		public static ALCcontextPtr GetCurrentContext()
		{
			ALCcontextPtr ret = GetCurrentContextNative();
			return ret;
		}

		/// <summary>
		/// Returns the device that a particular context is attached to. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetContextsDevice")]
		[return: NativeName(NativeNameType.Type, "ALCdevice*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ALCdevice* GetContextsDeviceNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ALCcontext*")] ALCcontext* context)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ALCcontext*, ALCdevice*>)funcTable[79])(context);
			#else
			return (ALCdevice*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[79])((nint)context);
			#endif
		}

		/// <summary>
		/// Returns the device that a particular context is attached to. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetContextsDevice")]
		[return: NativeName(NativeNameType.Type, "ALCdevice*")]
		public static ALCdevicePtr GetContextsDevice([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ALCcontext*")] ALCcontextPtr context)
		{
			ALCdevicePtr ret = GetContextsDeviceNative(context);
			return ret;
		}

		/// <summary>
		/// Returns the device that a particular context is attached to. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetContextsDevice")]
		[return: NativeName(NativeNameType.Type, "ALCdevice*")]
		public static ALCdevicePtr GetContextsDevice([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ALCcontext*")] ref ALCcontext context)
		{
			fixed (ALCcontext* pcontext = &context)
			{
				ALCdevicePtr ret = GetContextsDeviceNative((ALCcontext*)pcontext);
				return ret;
			}
		}

		/// <summary>
		/// Opens the named playback device. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcOpenDevice")]
		[return: NativeName(NativeNameType.Type, "ALCdevice*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ALCdevice* OpenDeviceNative([NativeName(NativeNameType.Param, "devicename")] [NativeName(NativeNameType.Type, "const ALCchar*")] byte* devicename)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ALCdevice*>)funcTable[80])(devicename);
			#else
			return (ALCdevice*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[80])((nint)devicename);
			#endif
		}

		/// <summary>
		/// Opens the named playback device. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcOpenDevice")]
		[return: NativeName(NativeNameType.Type, "ALCdevice*")]
		public static ALCdevicePtr OpenDevice([NativeName(NativeNameType.Param, "devicename")] [NativeName(NativeNameType.Type, "const ALCchar*")] byte* devicename)
		{
			ALCdevicePtr ret = OpenDeviceNative(devicename);
			return ret;
		}

		/// <summary>
		/// Opens the named playback device. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcOpenDevice")]
		[return: NativeName(NativeNameType.Type, "ALCdevice*")]
		public static ALCdevicePtr OpenDevice([NativeName(NativeNameType.Param, "devicename")] [NativeName(NativeNameType.Type, "const ALCchar*")] ref byte devicename)
		{
			fixed (byte* pdevicename = &devicename)
			{
				ALCdevicePtr ret = OpenDeviceNative((byte*)pdevicename);
				return ret;
			}
		}

		/// <summary>
		/// Opens the named playback device. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcOpenDevice")]
		[return: NativeName(NativeNameType.Type, "ALCdevice*")]
		public static ALCdevicePtr OpenDevice([NativeName(NativeNameType.Param, "devicename")] [NativeName(NativeNameType.Type, "const ALCchar*")] ReadOnlySpan<byte> devicename)
		{
			fixed (byte* pdevicename = devicename)
			{
				ALCdevicePtr ret = OpenDeviceNative((byte*)pdevicename);
				return ret;
			}
		}

		/// <summary>
		/// Opens the named playback device. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcOpenDevice")]
		[return: NativeName(NativeNameType.Type, "ALCdevice*")]
		public static ALCdevicePtr OpenDevice([NativeName(NativeNameType.Param, "devicename")] [NativeName(NativeNameType.Type, "const ALCchar*")] string devicename)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (devicename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(devicename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(devicename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ALCdevicePtr ret = OpenDeviceNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Closes the given playback device. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCloseDevice")]
		[return: NativeName(NativeNameType.Type, "ALCboolean")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CloseDeviceNative([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevice* device)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ALCdevice*, byte>)funcTable[81])(device);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[81])((nint)device);
			#endif
		}

		/// <summary>
		/// Closes the given playback device. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCloseDevice")]
		[return: NativeName(NativeNameType.Type, "ALCboolean")]
		public static byte CloseDevice([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device)
		{
			byte ret = CloseDeviceNative(device);
			return ret;
		}

		/// <summary>
		/// Closes the given playback device. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCloseDevice")]
		[return: NativeName(NativeNameType.Type, "ALCboolean")]
		public static byte CloseDevice([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				byte ret = CloseDeviceNative((ALCdevice*)pdevice);
				return ret;
			}
		}

		/// <summary>
		/// Obtain the first error generated in the AL context since the last call to<br/>
		/// this function.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetError")]
		[return: NativeName(NativeNameType.Type, "ALCenum")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetErrorNative([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevice* device)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ALCdevice*, int>)funcTable[82])(device);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[82])((nint)device);
			#endif
		}

		/// <summary>
		/// Obtain the first error generated in the AL context since the last call to<br/>
		/// this function.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetError")]
		[return: NativeName(NativeNameType.Type, "ALCenum")]
		public static int GetError([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device)
		{
			int ret = GetErrorNative(device);
			return ret;
		}

		/// <summary>
		/// Obtain the first error generated in the AL context since the last call to<br/>
		/// this function.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetError")]
		[return: NativeName(NativeNameType.Type, "ALCenum")]
		public static int GetError([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				int ret = GetErrorNative((ALCdevice*)pdevice);
				return ret;
			}
		}

		/// <summary>
		/// Query for the presence of an extension on the AL context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcIsExtensionPresent")]
		[return: NativeName(NativeNameType.Type, "ALCboolean")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsExtensionPresentNative([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevice* device, [NativeName(NativeNameType.Param, "extname")] [NativeName(NativeNameType.Type, "const ALCchar*")] byte* extname)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ALCdevice*, byte*, byte>)funcTable[83])(device, extname);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)funcTable[83])((nint)device, (nint)extname);
			#endif
		}

		/// <summary>
		/// Query for the presence of an extension on the AL context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcIsExtensionPresent")]
		[return: NativeName(NativeNameType.Type, "ALCboolean")]
		public static byte IsExtensionPresent([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device, [NativeName(NativeNameType.Param, "extname")] [NativeName(NativeNameType.Type, "const ALCchar*")] byte* extname)
		{
			byte ret = IsExtensionPresentNative(device, extname);
			return ret;
		}

		/// <summary>
		/// Query for the presence of an extension on the AL context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcIsExtensionPresent")]
		[return: NativeName(NativeNameType.Type, "ALCboolean")]
		public static byte IsExtensionPresent([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device, [NativeName(NativeNameType.Param, "extname")] [NativeName(NativeNameType.Type, "const ALCchar*")] byte* extname)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				byte ret = IsExtensionPresentNative((ALCdevice*)pdevice, extname);
				return ret;
			}
		}

		/// <summary>
		/// Query for the presence of an extension on the AL context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcIsExtensionPresent")]
		[return: NativeName(NativeNameType.Type, "ALCboolean")]
		public static byte IsExtensionPresent([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device, [NativeName(NativeNameType.Param, "extname")] [NativeName(NativeNameType.Type, "const ALCchar*")] ref byte extname)
		{
			fixed (byte* pextname = &extname)
			{
				byte ret = IsExtensionPresentNative(device, (byte*)pextname);
				return ret;
			}
		}

		/// <summary>
		/// Query for the presence of an extension on the AL context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcIsExtensionPresent")]
		[return: NativeName(NativeNameType.Type, "ALCboolean")]
		public static byte IsExtensionPresent([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device, [NativeName(NativeNameType.Param, "extname")] [NativeName(NativeNameType.Type, "const ALCchar*")] ReadOnlySpan<byte> extname)
		{
			fixed (byte* pextname = extname)
			{
				byte ret = IsExtensionPresentNative(device, (byte*)pextname);
				return ret;
			}
		}

		/// <summary>
		/// Query for the presence of an extension on the AL context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcIsExtensionPresent")]
		[return: NativeName(NativeNameType.Type, "ALCboolean")]
		public static byte IsExtensionPresent([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device, [NativeName(NativeNameType.Param, "extname")] [NativeName(NativeNameType.Type, "const ALCchar*")] string extname)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (extname != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(extname);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(extname, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = IsExtensionPresentNative(device, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Query for the presence of an extension on the AL context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcIsExtensionPresent")]
		[return: NativeName(NativeNameType.Type, "ALCboolean")]
		public static byte IsExtensionPresent([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device, [NativeName(NativeNameType.Param, "extname")] [NativeName(NativeNameType.Type, "const ALCchar*")] ref byte extname)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				fixed (byte* pextname = &extname)
				{
					byte ret = IsExtensionPresentNative((ALCdevice*)pdevice, (byte*)pextname);
					return ret;
				}
			}
		}

		/// <summary>
		/// Query for the presence of an extension on the AL context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcIsExtensionPresent")]
		[return: NativeName(NativeNameType.Type, "ALCboolean")]
		public static byte IsExtensionPresent([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device, [NativeName(NativeNameType.Param, "extname")] [NativeName(NativeNameType.Type, "const ALCchar*")] ReadOnlySpan<byte> extname)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				fixed (byte* pextname = extname)
				{
					byte ret = IsExtensionPresentNative((ALCdevice*)pdevice, (byte*)pextname);
					return ret;
				}
			}
		}

		/// <summary>
		/// Query for the presence of an extension on the AL context. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcIsExtensionPresent")]
		[return: NativeName(NativeNameType.Type, "ALCboolean")]
		public static byte IsExtensionPresent([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device, [NativeName(NativeNameType.Param, "extname")] [NativeName(NativeNameType.Type, "const ALCchar*")] string extname)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (extname != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(extname);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(extname, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = IsExtensionPresentNative((ALCdevice*)pdevice, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Retrieve the address of a function. The returned function may be context-<br/>
		/// specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetProcAddress")]
		[return: NativeName(NativeNameType.Type, "ALCvoid*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* GetProcAddressNative([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevice* device, [NativeName(NativeNameType.Param, "funcname")] [NativeName(NativeNameType.Type, "const ALCchar*")] byte* funcname)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ALCdevice*, byte*, void*>)funcTable[84])(device, funcname);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[84])((nint)device, (nint)funcname);
			#endif
		}

		/// <summary>
		/// Retrieve the address of a function. The returned function may be context-<br/>
		/// specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetProcAddress")]
		[return: NativeName(NativeNameType.Type, "ALCvoid*")]
		public static void* GetProcAddress([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device, [NativeName(NativeNameType.Param, "funcname")] [NativeName(NativeNameType.Type, "const ALCchar*")] byte* funcname)
		{
			void* ret = GetProcAddressNative(device, funcname);
			return ret;
		}

		/// <summary>
		/// Retrieve the address of a function. The returned function may be context-<br/>
		/// specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetProcAddress")]
		[return: NativeName(NativeNameType.Type, "ALCvoid*")]
		public static void* GetProcAddress([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device, [NativeName(NativeNameType.Param, "funcname")] [NativeName(NativeNameType.Type, "const ALCchar*")] byte* funcname)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				void* ret = GetProcAddressNative((ALCdevice*)pdevice, funcname);
				return ret;
			}
		}

		/// <summary>
		/// Retrieve the address of a function. The returned function may be context-<br/>
		/// specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetProcAddress")]
		[return: NativeName(NativeNameType.Type, "ALCvoid*")]
		public static void* GetProcAddress([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device, [NativeName(NativeNameType.Param, "funcname")] [NativeName(NativeNameType.Type, "const ALCchar*")] ref byte funcname)
		{
			fixed (byte* pfuncname = &funcname)
			{
				void* ret = GetProcAddressNative(device, (byte*)pfuncname);
				return ret;
			}
		}

		/// <summary>
		/// Retrieve the address of a function. The returned function may be context-<br/>
		/// specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetProcAddress")]
		[return: NativeName(NativeNameType.Type, "ALCvoid*")]
		public static void* GetProcAddress([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device, [NativeName(NativeNameType.Param, "funcname")] [NativeName(NativeNameType.Type, "const ALCchar*")] ReadOnlySpan<byte> funcname)
		{
			fixed (byte* pfuncname = funcname)
			{
				void* ret = GetProcAddressNative(device, (byte*)pfuncname);
				return ret;
			}
		}

		/// <summary>
		/// Retrieve the address of a function. The returned function may be context-<br/>
		/// specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetProcAddress")]
		[return: NativeName(NativeNameType.Type, "ALCvoid*")]
		public static void* GetProcAddress([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device, [NativeName(NativeNameType.Param, "funcname")] [NativeName(NativeNameType.Type, "const ALCchar*")] string funcname)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (funcname != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(funcname);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(funcname, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			void* ret = GetProcAddressNative(device, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Retrieve the address of a function. The returned function may be context-<br/>
		/// specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetProcAddress")]
		[return: NativeName(NativeNameType.Type, "ALCvoid*")]
		public static void* GetProcAddress([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device, [NativeName(NativeNameType.Param, "funcname")] [NativeName(NativeNameType.Type, "const ALCchar*")] ref byte funcname)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				fixed (byte* pfuncname = &funcname)
				{
					void* ret = GetProcAddressNative((ALCdevice*)pdevice, (byte*)pfuncname);
					return ret;
				}
			}
		}

		/// <summary>
		/// Retrieve the address of a function. The returned function may be context-<br/>
		/// specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetProcAddress")]
		[return: NativeName(NativeNameType.Type, "ALCvoid*")]
		public static void* GetProcAddress([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device, [NativeName(NativeNameType.Param, "funcname")] [NativeName(NativeNameType.Type, "const ALCchar*")] ReadOnlySpan<byte> funcname)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				fixed (byte* pfuncname = funcname)
				{
					void* ret = GetProcAddressNative((ALCdevice*)pdevice, (byte*)pfuncname);
					return ret;
				}
			}
		}

		/// <summary>
		/// Retrieve the address of a function. The returned function may be context-<br/>
		/// specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetProcAddress")]
		[return: NativeName(NativeNameType.Type, "ALCvoid*")]
		public static void* GetProcAddress([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device, [NativeName(NativeNameType.Param, "funcname")] [NativeName(NativeNameType.Type, "const ALCchar*")] string funcname)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (funcname != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(funcname);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(funcname, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				void* ret = GetProcAddressNative((ALCdevice*)pdevice, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Retrieve the value of an enum. The returned value may be context-specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetEnumValue")]
		[return: NativeName(NativeNameType.Type, "ALCenum")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetEnumValueNative([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevice* device, [NativeName(NativeNameType.Param, "enumname")] [NativeName(NativeNameType.Type, "const ALCchar*")] byte* enumname)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ALCdevice*, byte*, int>)funcTable[85])(device, enumname);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[85])((nint)device, (nint)enumname);
			#endif
		}

		/// <summary>
		/// Retrieve the value of an enum. The returned value may be context-specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetEnumValue")]
		[return: NativeName(NativeNameType.Type, "ALCenum")]
		public static int GetEnumValue([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device, [NativeName(NativeNameType.Param, "enumname")] [NativeName(NativeNameType.Type, "const ALCchar*")] byte* enumname)
		{
			int ret = GetEnumValueNative(device, enumname);
			return ret;
		}

		/// <summary>
		/// Retrieve the value of an enum. The returned value may be context-specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetEnumValue")]
		[return: NativeName(NativeNameType.Type, "ALCenum")]
		public static int GetEnumValue([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device, [NativeName(NativeNameType.Param, "enumname")] [NativeName(NativeNameType.Type, "const ALCchar*")] byte* enumname)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				int ret = GetEnumValueNative((ALCdevice*)pdevice, enumname);
				return ret;
			}
		}

		/// <summary>
		/// Retrieve the value of an enum. The returned value may be context-specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetEnumValue")]
		[return: NativeName(NativeNameType.Type, "ALCenum")]
		public static int GetEnumValue([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device, [NativeName(NativeNameType.Param, "enumname")] [NativeName(NativeNameType.Type, "const ALCchar*")] ref byte enumname)
		{
			fixed (byte* penumname = &enumname)
			{
				int ret = GetEnumValueNative(device, (byte*)penumname);
				return ret;
			}
		}

		/// <summary>
		/// Retrieve the value of an enum. The returned value may be context-specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetEnumValue")]
		[return: NativeName(NativeNameType.Type, "ALCenum")]
		public static int GetEnumValue([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device, [NativeName(NativeNameType.Param, "enumname")] [NativeName(NativeNameType.Type, "const ALCchar*")] ReadOnlySpan<byte> enumname)
		{
			fixed (byte* penumname = enumname)
			{
				int ret = GetEnumValueNative(device, (byte*)penumname);
				return ret;
			}
		}

		/// <summary>
		/// Retrieve the value of an enum. The returned value may be context-specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetEnumValue")]
		[return: NativeName(NativeNameType.Type, "ALCenum")]
		public static int GetEnumValue([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device, [NativeName(NativeNameType.Param, "enumname")] [NativeName(NativeNameType.Type, "const ALCchar*")] string enumname)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (enumname != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(enumname);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(enumname, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = GetEnumValueNative(device, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Retrieve the value of an enum. The returned value may be context-specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetEnumValue")]
		[return: NativeName(NativeNameType.Type, "ALCenum")]
		public static int GetEnumValue([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device, [NativeName(NativeNameType.Param, "enumname")] [NativeName(NativeNameType.Type, "const ALCchar*")] ref byte enumname)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				fixed (byte* penumname = &enumname)
				{
					int ret = GetEnumValueNative((ALCdevice*)pdevice, (byte*)penumname);
					return ret;
				}
			}
		}

		/// <summary>
		/// Retrieve the value of an enum. The returned value may be context-specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetEnumValue")]
		[return: NativeName(NativeNameType.Type, "ALCenum")]
		public static int GetEnumValue([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device, [NativeName(NativeNameType.Param, "enumname")] [NativeName(NativeNameType.Type, "const ALCchar*")] ReadOnlySpan<byte> enumname)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				fixed (byte* penumname = enumname)
				{
					int ret = GetEnumValueNative((ALCdevice*)pdevice, (byte*)penumname);
					return ret;
				}
			}
		}

		/// <summary>
		/// Retrieve the value of an enum. The returned value may be context-specific.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetEnumValue")]
		[return: NativeName(NativeNameType.Type, "ALCenum")]
		public static int GetEnumValue([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device, [NativeName(NativeNameType.Param, "enumname")] [NativeName(NativeNameType.Type, "const ALCchar*")] string enumname)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (enumname != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(enumname);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(enumname, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = GetEnumValueNative((ALCdevice*)pdevice, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Context state retrieval. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetString")]
		[return: NativeName(NativeNameType.Type, "const ALCchar*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetStringNative([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevice* device, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALCenum")] int param)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ALCdevice*, int, byte*>)funcTable[86])(device, param);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, int, nint>)funcTable[86])((nint)device, param);
			#endif
		}

		/// <summary>
		/// Context state retrieval. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetString")]
		[return: NativeName(NativeNameType.Type, "const ALCchar*")]
		public static byte* GetString([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALCenum")] int param)
		{
			byte* ret = GetStringNative(device, param);
			return ret;
		}

		/// <summary>
		/// Context state retrieval. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetString")]
		[return: NativeName(NativeNameType.Type, "const ALCchar*")]
		public static string GetStringS([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALCenum")] int param)
		{
			string ret = Utils.DecodeStringUTF8(GetStringNative(device, param));
			return ret;
		}

		/// <summary>
		/// Context state retrieval. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetString")]
		[return: NativeName(NativeNameType.Type, "const ALCchar*")]
		public static byte* GetString([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALCenum")] int param)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				byte* ret = GetStringNative((ALCdevice*)pdevice, param);
				return ret;
			}
		}

		/// <summary>
		/// Context state retrieval. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetString")]
		[return: NativeName(NativeNameType.Type, "const ALCchar*")]
		public static string GetStringS([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALCenum")] int param)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				string ret = Utils.DecodeStringUTF8(GetStringNative((ALCdevice*)pdevice, param));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetIntegerv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetIntegervNative([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevice* device, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALCenum")] int param, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "ALCsizei")] int size, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALCint*")] int* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ALCdevice*, int, int, int*, void>)funcTable[87])(device, param, size, values);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, nint, void>)funcTable[87])((nint)device, param, size, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetIntegerv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetIntegerv([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALCenum")] int param, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "ALCsizei")] int size, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALCint*")] int* values)
		{
			GetIntegervNative(device, param, size, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetIntegerv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetIntegerv([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALCenum")] int param, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "ALCsizei")] int size, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALCint*")] int* values)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				GetIntegervNative((ALCdevice*)pdevice, param, size, values);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetIntegerv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetIntegerv([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALCenum")] int param, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "ALCsizei")] int size, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALCint*")] ref int values)
		{
			fixed (int* pvalues = &values)
			{
				GetIntegervNative(device, param, size, (int*)pvalues);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "alcGetIntegerv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetIntegerv([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "ALCenum")] int param, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "ALCsizei")] int size, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "ALCint*")] ref int values)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				fixed (int* pvalues = &values)
				{
					GetIntegervNative((ALCdevice*)pdevice, param, size, (int*)pvalues);
				}
			}
		}

		/// <summary>
		/// Opens the named capture device with the given frequency, format, and buffer<br/>
		/// size.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCaptureOpenDevice")]
		[return: NativeName(NativeNameType.Type, "ALCdevice*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ALCdevice* CaptureOpenDeviceNative([NativeName(NativeNameType.Param, "devicename")] [NativeName(NativeNameType.Type, "const ALCchar*")] byte* devicename, [NativeName(NativeNameType.Param, "frequency")] [NativeName(NativeNameType.Type, "ALCuint")] uint frequency, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "ALCenum")] int format, [NativeName(NativeNameType.Param, "buffersize")] [NativeName(NativeNameType.Type, "ALCsizei")] int buffersize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, uint, int, int, ALCdevice*>)funcTable[88])(devicename, frequency, format, buffersize);
			#else
			return (ALCdevice*)((delegate* unmanaged[Cdecl]<nint, uint, int, int, nint>)funcTable[88])((nint)devicename, frequency, format, buffersize);
			#endif
		}

		/// <summary>
		/// Opens the named capture device with the given frequency, format, and buffer<br/>
		/// size.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCaptureOpenDevice")]
		[return: NativeName(NativeNameType.Type, "ALCdevice*")]
		public static ALCdevicePtr CaptureOpenDevice([NativeName(NativeNameType.Param, "devicename")] [NativeName(NativeNameType.Type, "const ALCchar*")] byte* devicename, [NativeName(NativeNameType.Param, "frequency")] [NativeName(NativeNameType.Type, "ALCuint")] uint frequency, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "ALCenum")] int format, [NativeName(NativeNameType.Param, "buffersize")] [NativeName(NativeNameType.Type, "ALCsizei")] int buffersize)
		{
			ALCdevicePtr ret = CaptureOpenDeviceNative(devicename, frequency, format, buffersize);
			return ret;
		}

		/// <summary>
		/// Opens the named capture device with the given frequency, format, and buffer<br/>
		/// size.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCaptureOpenDevice")]
		[return: NativeName(NativeNameType.Type, "ALCdevice*")]
		public static ALCdevicePtr CaptureOpenDevice([NativeName(NativeNameType.Param, "devicename")] [NativeName(NativeNameType.Type, "const ALCchar*")] ref byte devicename, [NativeName(NativeNameType.Param, "frequency")] [NativeName(NativeNameType.Type, "ALCuint")] uint frequency, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "ALCenum")] int format, [NativeName(NativeNameType.Param, "buffersize")] [NativeName(NativeNameType.Type, "ALCsizei")] int buffersize)
		{
			fixed (byte* pdevicename = &devicename)
			{
				ALCdevicePtr ret = CaptureOpenDeviceNative((byte*)pdevicename, frequency, format, buffersize);
				return ret;
			}
		}

		/// <summary>
		/// Opens the named capture device with the given frequency, format, and buffer<br/>
		/// size.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCaptureOpenDevice")]
		[return: NativeName(NativeNameType.Type, "ALCdevice*")]
		public static ALCdevicePtr CaptureOpenDevice([NativeName(NativeNameType.Param, "devicename")] [NativeName(NativeNameType.Type, "const ALCchar*")] ReadOnlySpan<byte> devicename, [NativeName(NativeNameType.Param, "frequency")] [NativeName(NativeNameType.Type, "ALCuint")] uint frequency, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "ALCenum")] int format, [NativeName(NativeNameType.Param, "buffersize")] [NativeName(NativeNameType.Type, "ALCsizei")] int buffersize)
		{
			fixed (byte* pdevicename = devicename)
			{
				ALCdevicePtr ret = CaptureOpenDeviceNative((byte*)pdevicename, frequency, format, buffersize);
				return ret;
			}
		}

		/// <summary>
		/// Opens the named capture device with the given frequency, format, and buffer<br/>
		/// size.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCaptureOpenDevice")]
		[return: NativeName(NativeNameType.Type, "ALCdevice*")]
		public static ALCdevicePtr CaptureOpenDevice([NativeName(NativeNameType.Param, "devicename")] [NativeName(NativeNameType.Type, "const ALCchar*")] string devicename, [NativeName(NativeNameType.Param, "frequency")] [NativeName(NativeNameType.Type, "ALCuint")] uint frequency, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "ALCenum")] int format, [NativeName(NativeNameType.Param, "buffersize")] [NativeName(NativeNameType.Type, "ALCsizei")] int buffersize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (devicename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(devicename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(devicename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ALCdevicePtr ret = CaptureOpenDeviceNative(pStr0, frequency, format, buffersize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Closes the given capture device. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCaptureCloseDevice")]
		[return: NativeName(NativeNameType.Type, "ALCboolean")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CaptureCloseDeviceNative([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevice* device)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ALCdevice*, byte>)funcTable[89])(device);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[89])((nint)device);
			#endif
		}

		/// <summary>
		/// Closes the given capture device. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCaptureCloseDevice")]
		[return: NativeName(NativeNameType.Type, "ALCboolean")]
		public static byte CaptureCloseDevice([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device)
		{
			byte ret = CaptureCloseDeviceNative(device);
			return ret;
		}

		/// <summary>
		/// Closes the given capture device. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCaptureCloseDevice")]
		[return: NativeName(NativeNameType.Type, "ALCboolean")]
		public static byte CaptureCloseDevice([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				byte ret = CaptureCloseDeviceNative((ALCdevice*)pdevice);
				return ret;
			}
		}

		/// <summary>
		/// Starts capturing samples into the device buffer. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCaptureStart")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CaptureStartNative([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevice* device)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ALCdevice*, void>)funcTable[90])(device);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[90])((nint)device);
			#endif
		}

		/// <summary>
		/// Starts capturing samples into the device buffer. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCaptureStart")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CaptureStart([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device)
		{
			CaptureStartNative(device);
		}

		/// <summary>
		/// Starts capturing samples into the device buffer. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCaptureStart")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CaptureStart([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				CaptureStartNative((ALCdevice*)pdevice);
			}
		}

		/// <summary>
		/// Stops capturing samples. Samples in the device buffer remain available. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCaptureStop")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CaptureStopNative([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevice* device)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ALCdevice*, void>)funcTable[91])(device);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[91])((nint)device);
			#endif
		}

		/// <summary>
		/// Stops capturing samples. Samples in the device buffer remain available. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCaptureStop")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CaptureStop([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device)
		{
			CaptureStopNative(device);
		}

		/// <summary>
		/// Stops capturing samples. Samples in the device buffer remain available. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCaptureStop")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CaptureStop([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				CaptureStopNative((ALCdevice*)pdevice);
			}
		}

		/// <summary>
		/// Reads samples from the device buffer. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCaptureSamples")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CaptureSamplesNative([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevice* device, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALCvoid*")] void* buffer, [NativeName(NativeNameType.Param, "samples")] [NativeName(NativeNameType.Type, "ALCsizei")] int samples)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ALCdevice*, void*, int, void>)funcTable[92])(device, buffer, samples);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, void>)funcTable[92])((nint)device, (nint)buffer, samples);
			#endif
		}

		/// <summary>
		/// Reads samples from the device buffer. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCaptureSamples")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CaptureSamples([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ALCdevicePtr device, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALCvoid*")] void* buffer, [NativeName(NativeNameType.Param, "samples")] [NativeName(NativeNameType.Type, "ALCsizei")] int samples)
		{
			CaptureSamplesNative(device, buffer, samples);
		}

		/// <summary>
		/// Reads samples from the device buffer. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "alcCaptureSamples")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CaptureSamples([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "ALCdevice*")] ref ALCdevice device, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ALCvoid*")] void* buffer, [NativeName(NativeNameType.Param, "samples")] [NativeName(NativeNameType.Type, "ALCsizei")] int samples)
		{
			fixed (ALCdevice* pdevice = &device)
			{
				CaptureSamplesNative((ALCdevice*)pdevice, buffer, samples);
			}
		}

	}
}
